/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.5.6320.26089 (NJsonSchema v8.32.6319.16936) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export interface IMemberManagementClient {
    add(member: MemberDto): Observable<MemberDto | null>;
    get(email: string): Observable<MemberDto | null>;
    login(email: string, password: string): Observable<MemberDto | null>;
    changePassword(dto: ChangePasswordDto): Observable<MemberDto | null>;
}

@Injectable()
export class MemberManagementClient implements IMemberManagementClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    add(member: MemberDto): Observable<MemberDto | null> {
        let url_ = this.baseUrl + "/api/Member/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member ? member.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAdd(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAdd(response_);
                } catch (e) {
                    return <Observable<MemberDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<MemberDto>><any>Observable.throw(response_);
        });
    }

    protected processAdd(response: Response): Observable<MemberDto | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: MemberDto | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<MemberDto | null>(<any>null);
    }

    get(email: string): Observable<MemberDto | null> {
        let url_ = this.baseUrl + "/api/Member/Get/{email}";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined.");
        url_ = url_.replace("{email}", encodeURIComponent("" + email)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<MemberDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<MemberDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<MemberDto | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: MemberDto | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<MemberDto | null>(<any>null);
    }

    login(email: string, password: string): Observable<MemberDto | null> {
        let url_ = this.baseUrl + "/api/Member/Login?";
        if (email === undefined)
            throw new Error("The parameter 'email' must be defined.");
        else
            url_ += "email=" + encodeURIComponent("" + email) + "&"; 
        if (password === undefined)
            throw new Error("The parameter 'password' must be defined.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogin(response_);
                } catch (e) {
                    return <Observable<MemberDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<MemberDto>><any>Observable.throw(response_);
        });
    }

    protected processLogin(response: Response): Observable<MemberDto | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: MemberDto | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<MemberDto | null>(<any>null);
    }

    changePassword(dto: ChangePasswordDto): Observable<MemberDto | null> {
        let url_ = this.baseUrl + "/api/Member/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto ? dto.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(response_);
                } catch (e) {
                    return <Observable<MemberDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<MemberDto>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<MemberDto | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: MemberDto | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<MemberDto | null>(<any>null);
    }
}

export interface IPhotoManagementClient {
    add(uploadData: PhotoUploadData): Observable<PhotoManagementData | null>;
    delete(photoId: string): Observable<void>;
    get(id: string): Observable<PhotoManagementData | null>;
    getThumbnailsOfMember(email: string): Observable<PhotoManagementData[] | null>;
    getImagesOfMember(): Observable<PhotoMemberInfo[] | null>;
    getComments(photoId: string): Observable<CommentData[] | null>;
    addComment(uploadData: CommentUploadData): Observable<CommentData | null>;
    uploadPhoto(): Observable<Blob | null>;
    backup(): Observable<string | null>;
    restore(): Observable<void>;
}

@Injectable()
export class PhotoManagementClient implements IPhotoManagementClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    add(uploadData: PhotoUploadData): Observable<PhotoManagementData | null> {
        let url_ = this.baseUrl + "/api/Photo/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(uploadData ? uploadData.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAdd(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAdd(response_);
                } catch (e) {
                    return <Observable<PhotoManagementData>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoManagementData>><any>Observable.throw(response_);
        });
    }

    protected processAdd(response: Response): Observable<PhotoManagementData | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PhotoManagementData | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PhotoManagementData.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PhotoManagementData | null>(<any>null);
    }

    delete(photoId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Photo/Delete?";
        if (photoId === undefined || photoId === null)
            throw new Error("The parameter 'photoId' must be defined and cannot be null.");
        else
            url_ += "photoId=" + encodeURIComponent("" + photoId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 204) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get(id: string): Observable<PhotoManagementData | null> {
        let url_ = this.baseUrl + "/api/Photo/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<PhotoManagementData>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoManagementData>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<PhotoManagementData | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PhotoManagementData | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PhotoManagementData.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PhotoManagementData | null>(<any>null);
    }

    getThumbnailsOfMember(email: string): Observable<PhotoManagementData[] | null> {
        let url_ = this.baseUrl + "/api/Photo/GetThumbnailsOfMember/{email}";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined.");
        url_ = url_.replace("{email}", encodeURIComponent("" + email)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetThumbnailsOfMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetThumbnailsOfMember(response_);
                } catch (e) {
                    return <Observable<PhotoManagementData[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoManagementData[]>><any>Observable.throw(response_);
        });
    }

    protected processGetThumbnailsOfMember(response: Response): Observable<PhotoManagementData[] | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PhotoManagementData[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoManagementData.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PhotoManagementData[] | null>(<any>null);
    }

    getImagesOfMember(): Observable<PhotoMemberInfo[] | null> {
        let url_ = this.baseUrl + "/api/Photo/GetImagesOfMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetImagesOfMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetImagesOfMember(response_);
                } catch (e) {
                    return <Observable<PhotoMemberInfo[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoMemberInfo[]>><any>Observable.throw(response_);
        });
    }

    protected processGetImagesOfMember(response: Response): Observable<PhotoMemberInfo[] | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PhotoMemberInfo[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoMemberInfo.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PhotoMemberInfo[] | null>(<any>null);
    }

    getComments(photoId: string): Observable<CommentData[] | null> {
        let url_ = this.baseUrl + "/api/Photo/GetComments/{photoId}";
        if (photoId === undefined || photoId === null)
            throw new Error("The parameter 'photoId' must be defined.");
        url_ = url_.replace("{photoId}", encodeURIComponent("" + photoId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetComments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetComments(response_);
                } catch (e) {
                    return <Observable<CommentData[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CommentData[]>><any>Observable.throw(response_);
        });
    }

    protected processGetComments(response: Response): Observable<CommentData[] | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: CommentData[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CommentData.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<CommentData[] | null>(<any>null);
    }

    addComment(uploadData: CommentUploadData): Observable<CommentData | null> {
        let url_ = this.baseUrl + "/api/Photo/AddComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(uploadData ? uploadData.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAddComment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddComment(response_);
                } catch (e) {
                    return <Observable<CommentData>><any>Observable.throw(e);
                }
            } else
                return <Observable<CommentData>><any>Observable.throw(response_);
        });
    }

    protected processAddComment(response: Response): Observable<CommentData | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: CommentData | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CommentData.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<CommentData | null>(<any>null);
    }

    uploadPhoto(): Observable<Blob | null> {
        let url_ = this.baseUrl + "/api/Photo/UploadPhoto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUploadPhoto(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUploadPhoto(response_);
                } catch (e) {
                    return <Observable<Blob>><any>Observable.throw(e);
                }
            } else
                return <Observable<Blob>><any>Observable.throw(response_);
        });
    }

    protected processUploadPhoto(response: Response): Observable<Blob | null> {
        const status = response.status; 

        if (status === 200) {
            return Observable.of(response.blob());
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.blob()).flatMap(responseText => {
            return throwException("An unexpected server error occurred.", status, responseText);
            });
        }
        return Observable.of<Blob | null>(<any>null);
    }

    backup(): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Photo/Backup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBackup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackup(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processBackup(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    restore(): Observable<void> {
        let url_ = this.baseUrl + "/api/Photo/Restore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRestore(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRestore(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRestore(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 204) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

export class MemberDto implements IMemberDto {
    firstName?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    entryDate?: Date | undefined;
    lastUpdate?: Date | undefined;
    id: string;
    password?: string | undefined;

    constructor(data?: IMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["FirstName"];
            this.surname = data["Surname"];
            this.email = data["Email"];
            this.entryDate = data["EntryDate"] ? new Date(data["EntryDate"].toString()) : <any>undefined;
            this.lastUpdate = data["LastUpdate"] ? new Date(data["LastUpdate"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.password = data["Password"];
        }
    }

    static fromJS(data: any): MemberDto {
        let result = new MemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["Surname"] = this.surname;
        data["Email"] = this.email;
        data["EntryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>undefined;
        data["LastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["Password"] = this.password;
        return data; 
    }
}

export interface IMemberDto {
    firstName?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    entryDate?: Date | undefined;
    lastUpdate?: Date | undefined;
    id: string;
    password?: string | undefined;
}

export class ChangePasswordDto implements IChangePasswordDto {
    newPassword?: string | undefined;
    oldPassword?: string | undefined;
    email?: string | undefined;

    constructor(data?: IChangePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newPassword = data["NewPassword"];
            this.oldPassword = data["OldPassword"];
            this.email = data["Email"];
        }
    }

    static fromJS(data: any): ChangePasswordDto {
        let result = new ChangePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NewPassword"] = this.newPassword;
        data["OldPassword"] = this.oldPassword;
        data["Email"] = this.email;
        return data; 
    }
}

export interface IChangePasswordDto {
    newPassword?: string | undefined;
    oldPassword?: string | undefined;
    email?: string | undefined;
}

export class PhotoUploadData implements IPhotoUploadData {
    data?: string | undefined;
    fileName?: string | undefined;
    title?: string | undefined;
    email?: string | undefined;

    constructor(data?: IPhotoUploadData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"];
            this.fileName = data["FileName"];
            this.title = data["Title"];
            this.email = data["Email"];
        }
    }

    static fromJS(data: any): PhotoUploadData {
        let result = new PhotoUploadData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data;
        data["FileName"] = this.fileName;
        data["Title"] = this.title;
        data["Email"] = this.email;
        return data; 
    }
}

export interface IPhotoUploadData {
    data?: string | undefined;
    fileName?: string | undefined;
    title?: string | undefined;
    email?: string | undefined;
}

export class PhotoManagementData implements IPhotoManagementData {
    fileName?: string | undefined;
    thumbnailBytes?: string | undefined;
    title?: string | undefined;
    id?: string | undefined;

    constructor(data?: IPhotoManagementData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["FileName"];
            this.thumbnailBytes = data["ThumbnailBytes"];
            this.title = data["Title"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): PhotoManagementData {
        let result = new PhotoManagementData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FileName"] = this.fileName;
        data["ThumbnailBytes"] = this.thumbnailBytes;
        data["Title"] = this.title;
        data["Id"] = this.id;
        return data; 
    }
}

export interface IPhotoManagementData {
    fileName?: string | undefined;
    thumbnailBytes?: string | undefined;
    title?: string | undefined;
    id?: string | undefined;
}

export class PhotoMemberInfo implements IPhotoMemberInfo {
    email?: string | undefined;
    fileName?: string | undefined;
    title?: string | undefined;
    photoId?: string | undefined;

    constructor(data?: IPhotoMemberInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["Email"];
            this.fileName = data["FileName"];
            this.title = data["Title"];
            this.photoId = data["PhotoId"];
        }
    }

    static fromJS(data: any): PhotoMemberInfo {
        let result = new PhotoMemberInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["FileName"] = this.fileName;
        data["Title"] = this.title;
        data["PhotoId"] = this.photoId;
        return data; 
    }
}

export interface IPhotoMemberInfo {
    email?: string | undefined;
    fileName?: string | undefined;
    title?: string | undefined;
    photoId?: string | undefined;
}

export class CommentData implements ICommentData {
    comment?: string | undefined;
    authorId?: string | undefined;
    photoId: string;
    commentDate: Date;
    id?: string | undefined;

    constructor(data?: ICommentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.comment = data["Comment"];
            this.authorId = data["AuthorId"];
            this.photoId = data["PhotoId"];
            this.commentDate = data["CommentDate"] ? new Date(data["CommentDate"].toString()) : <any>undefined;
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): CommentData {
        let result = new CommentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Comment"] = this.comment;
        data["AuthorId"] = this.authorId;
        data["PhotoId"] = this.photoId;
        data["CommentDate"] = this.commentDate ? this.commentDate.toISOString() : <any>undefined;
        data["Id"] = this.id;
        return data; 
    }
}

export interface ICommentData {
    comment?: string | undefined;
    authorId?: string | undefined;
    photoId: string;
    commentDate: Date;
    id?: string | undefined;
}

export class CommentUploadData implements ICommentUploadData {
    comment?: string | undefined;
    email?: string | undefined;
    photoId: string;
    createDate: Date;

    constructor(data?: ICommentUploadData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.comment = data["Comment"];
            this.email = data["Email"];
            this.photoId = data["PhotoId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CommentUploadData {
        let result = new CommentUploadData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Comment"] = this.comment;
        data["Email"] = this.email;
        data["PhotoId"] = this.photoId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICommentUploadData {
    comment?: string | undefined;
    email?: string | undefined;
    photoId: string;
    createDate: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    return Observable.throw(new SwaggerException(message, status, response, result));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}